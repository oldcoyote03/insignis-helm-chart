# Default values for insignis.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

service:
  type: LoadBalancer
  port: 5000

# Whether to run securely against cockroachdb using TLS certificates.
tls:
  enabled: false
  serviceAccount:
    # Specifies whether this ServiceAccount should be created.
    create: true
    # The name of this ServiceAccount to use.
    # If not set and `create` is `true`, then a name is auto-generated.
    name: ""
  certs:
    # Bring your own certs scenario. If provided, tls.init section will be ignored.
    provided: false
    # Secret name for the client root cert.
    clientRootSecret: cockroachdb-root
    # Enable if the secret is a dedicated TLS.
    # TLS secrets are created by cert-mananger, for example.
    tlsSecret: false
    # Enable if the you want to leverage cockroach db CA certificates
    selfSigner:
      # If set, the cockroachdb has generated its own certificates.
      # The CA certificate will be used to generate the provisioned app user client certificate.
      enabled: true
      # If Values.tls.selfSigner.enabled, the user should provide the cockroachdb generated CA certificate.
      # It holds the name of the secret with caCerts.
      caSecret: "insignis-cockroachdb-ca-secret"
      # Minimum Certificate duration for all the certificates, all certs duration will be validated against this.
      minimumCertDuration: 624h
      # Duration of Client certificates in hour
      clientCertDuration: 672h
      # Expiry window of client certificates means a window before actual expiry in which client certs should be rotated.
      clientCertExpiryWindow: 48h
      # If set, the cockroachdb cert selfSigner will rotate the certificates before expiry.
      rotateCerts: true
      # Wait time for each cockroachdb replica to become ready once it comes in running state. Only considered when rotateCerts is set to true
      readinessWait: 30s
      # Wait time for each cockroachdb replica to get to running state. Only considered when rotateCerts is set to true
      podUpdateTimeout: 2m
  
  selfSigner:
    # Image Placeholder for the selfSigner utility. This will be changed once the CI workflows for the image is in place.
    image:
      repository: cockroachlabs-helm-charts/cockroach-self-signer-cert
      tag: "1.3"
      pullPolicy: IfNotPresent
      credentials: {}
      registry: gcr.io
      # username: john_doe
      # password: changeme

database:
  name: "insignis_db"
  user: "insignis"

deployment:
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  budget:
    maxUnavailable: 1
  
  # List of extra environment variables to pass into container
  env: []
    # - name: COCKROACH_ENGINE_MAX_SYNC_DURATION
    #   value: "24h"
  
  # Additional labels to apply to this Deployment and all its Pods.
  labels:
    app.kubernetes.io/component: insignis
  
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

image:
  repository: oldcoyote03/tagger-api
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "v0.10"

clusterDomain: cluster.local



# Additional labels to apply to all Kubernetes resources created by this chart.
labels: {}
  # app.kubernetes.io/part-of: my-app

replicaCount: 1

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
